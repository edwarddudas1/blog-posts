{"mappings":"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","sources":["public/script.js"],"sourcesContent":["let postsArray = [];\r\nlet template;\r\n\r\n// –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç—ñ–≤\r\nasync function getPosts() {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/posts\");\r\n\r\n    console.log(\"Response status:\", response.status);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Network Error Response Identified\");\r\n    }\r\n\r\n    const data = await response.json();\r\n    console.log(\"Fetched data:\", data);\r\n    postsArray = data;\r\n\r\n  } catch (error) {\r\n    console.error(\"Error fetching or processing data\", error);\r\n  }\r\n}\r\n\r\nasync function createPost(title, content) {\r\n  try {\r\n    const response = await fetch(\"http://localhost:3000/posts\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ title, content }),\r\n    });\r\n    console.log(response, \"response\");\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to create post\");\r\n    }\r\n\r\n    const newPost = await response.json();\r\n    postsArray.push(newPost);\r\n    console.log(\"Rendering posts with data:\", postsArray);\r\n    renderPosts(postsArray);\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\n// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞\r\nconst updatePost = async (id, title, content) => {\r\n  try {\r\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ title, content }), // Send the post data as an object\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to update post\");\r\n    }\r\n\r\n    const updatedPost = await response.json();\r\n    console.log(\"Updated post:\", updatedPost);\r\n\r\n    // Optionally, update the postsArray locally to reflect the updated post\r\n    postsArray = postsArray.map((post) =>\r\n      post.id === id ? { ...post, title, content } : post\r\n    );\r\n    renderPosts(postsArray); // Re-render the updated posts list\r\n  } catch (error) {\r\n    console.error(\"Error updating post:\", error);\r\n  }\r\n};\r\n\r\n// –í–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞\r\nasync function deletePost(id) {\r\n  try {\r\n    // Send DELETE request to the server\r\n    const response = await fetch(`http://localhost:3000/posts/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    console.log(\"deletePost response:\", response);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\"Failed to delete the post\");\r\n    }\r\n\r\n    // Remove the post from the local posts array after successful deletion\r\n    postsArray = postsArray.filter((post) => post.id !== Number(id));\r\n    renderPosts(postsArray); // Re-render the posts list to reflect the change\r\n  } catch (error) {\r\n    console.error(\"Error deleting post\", error);\r\n  }\r\n}\r\n\r\n// –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –¥–æ –ø–æ—Å—Ç–∞\r\nasync function createComment(postId, commentText) {\r\n  console.log(\r\n    \"üö® Debugging createComment | postId:\",\r\n    postId,\r\n    \"Comment:\",\r\n    commentText\r\n  );\r\n\r\n  if (!postId || postId < 1) {\r\n    console.error(\"‚ùå Invalid post ID:\", postId);\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `http://localhost:3000/posts/${postId}/comments`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ content: commentText }),\r\n      }\r\n    );\r\n\r\n    if (!response.ok) {\r\n      throw new Error(\r\n        `Failed to create comment. Server responded with status ${response.status}`\r\n      );\r\n    }\r\n\r\n    const result = await response.json();\r\n    console.log(\"‚úÖ Comment added:\", result);\r\n\r\n    postsArray = postsArray.map((post) =>\r\n      post.id === postId\r\n        ? { ...post, comments: [...(post.comments || []), result.comment] }\r\n        : post\r\n    );\r\n    renderPosts(postsArray);\r\n  } catch (error) {\r\n    console.error(\"‚ùå Error creating comment:\", error);\r\n  }\r\n}\r\n\r\n// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Å—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ\r\n\r\nfunction renderPosts(posts) {\r\n  const menuContainer = document.querySelector(\".menuContainer\");\r\n\r\n  if (!template) {\r\n    return console.log(\"Template not found\");\r\n  }\r\n  const postTemplate = template({ posts });\r\n  menuContainer.innerHTML = postTemplate;\r\n}\r\n\r\n// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞\r\ndocument.getElementById(\"createPostForm\").addEventListener(\"submit\", (e) => {\r\n  e.preventDefault();\r\n  const title = document.getElementById(\"titleInput\").value;\r\n  const content = document.getElementById(\"contentInput\").value;\r\n  createPost(title, content);\r\n\r\n  document.getElementById(\"titleInput\").value = \"\";\r\n  document.getElementById(\"contentInput\").value = \"\";\r\n});\r\n\r\n// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Å—Ç–∞\r\n//   document.addEventListener('click', cb);\r\n\r\n// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞\r\n\r\ndocument.addEventListener(\"click\", function (event) {\r\n  if (event.target.classList.contains(\"editPostButton\")) {\r\n    const findId = event.target.getAttribute(\"data-id\");\r\n    const newTitle = prompt(\"Enter new title:\");\r\n    const newText = prompt(\"Enter new content:\");\r\n\r\n    if (newTitle && newText) {\r\n      console.log(`Updating post with ID: ${findId}`);\r\n      updatePost(Number(findId), newTitle, newText);\r\n    }\r\n  }\r\n});\r\n\r\n// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–æ—Å—Ç–∞\r\ndocument.addEventListener(\"click\", (event) => {\r\n  if (event.target.classList.contains(\"deletePostButton\")) {\r\n    const id = event.target.getAttribute(\"data-id\");\r\n    if (id) {\r\n      console.log(\"Delete button clicked for post ID:\", id);\r\n      deletePost(id);\r\n    } else {\r\n      console.error(\"No valid post ID found for delete operation.\");\r\n    }\r\n  }\r\n});\r\n\r\n// –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—ñ—ó –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è\r\ndocument.addEventListener(\"submit\", (event) => {\r\n  if (event.target.classList.contains(\"createCommentForm\")) {\r\n    event.preventDefault();\r\n\r\n    const postId = Number(event.target.getAttribute(\"data-post-id\"));\r\n    const commentInput = event.target.querySelector(\".commentInput\");\r\n    const commentText = commentInput.value.trim();\r\n\r\n    if (!commentText) {\r\n      console.error(\"Comment cannot be empty\");\r\n      return;\r\n    }\r\n\r\n    createComment(postId, commentText);\r\n    commentInput.value = \"\";\r\n  }\r\n});\r\n\r\n// –ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É\r\nasync function startApp() {\r\n  const posts = await getPosts();\r\n  const sourceElement = document.querySelector(\".menuTemplate\");\r\n\r\n  const source =\r\n    sourceElement.innerHTML ||\r\n    sourceElement.content.firstElementChild.innerHTML;\r\n  if (!source.trim()) {\r\n    console.error(\"Template source is empty\");\r\n    return;\r\n  }\r\n\r\n  template = Handlebars.compile(source); // Move this here so template is available globally\r\n  renderPosts(postsArray); // No need to call renderPosts again in startApp\r\n}\r\n\r\nstartApp();\r\n"],"names":[],"version":3,"file":"index.f3bd186e.js.map","sourceRoot":"/__parcel_source_root/"}